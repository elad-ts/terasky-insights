name: Release Go Binaries

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

concurrency: 
  group: release-process
  cancel-in-progress: true

jobs:
  build:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64]
        include:
          - platform: linux-amd64
            GOOS: linux
            GOARCH: amd64
            extension: ""
          - platform: linux-arm64
            GOOS: linux
            GOARCH: arm64
            extension: ""
          - platform: darwin-amd64
            GOOS: darwin
            GOARCH: amd64
            extension: ""
          - platform: darwin-arm64
            GOOS: darwin
            GOARCH: arm64
            extension: ""
          - platform: windows-amd64
            GOOS: windows
            GOARCH: amd64
            extension: ".exe"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.6' 

       # Get the latest release version
      - name: Get Latest Release
        id: latest_release
        uses: actions/github-script@v5
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            return release.data.tag_name;
          result-encoding: string
      
      # Increment the version number
      - name: Increment Version Number
        id: increment_version
        run: |
          LATEST_VERSION=${{ steps.latest_release.outputs.result }}
          # Increment version logic here. Example assumes semantic versioning and increments patch number.
          NEW_VERSION=$(echo $LATEST_VERSION | awk -F. '{print $1 "." $2 "." $3+1}')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Build Artificats
        id: build_binary
        run: |
          env GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }} go build -ldflags="-X 'main.version=${{ env.NEW_VERSION }}'" -o terasky-insights-${{ matrix.platform }}${{ matrix.extension }}
        working-directory: ./ 

      - name: Upload binary to artifacts
        id: upload_binary_artificats
        uses: actions/upload-artifact@v4
        with:
          name: terasky-insights-${{ matrix.platform }}${{ matrix.extension }}
          path: terasky-insights-${{ matrix.platform }}${{ matrix.extension }}

  release:
    name: Create and Upload Release
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: upload linux amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-linux-amd64/terasky-insights-linux-amd64
          asset_name: terasky-insights-linux-amd64 
          asset_content_type: application/octet-stream
          
      - name: upload linux arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-linux-arm64/terasky-insights-linux-arm64
          asset_name: terasky-insights-linux-arm64 
          asset_content_type: application/octet-stream
      - name: upload darwin amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-darwin-amd64/terasky-insights-darwin-amd64
          asset_name: terasky-insights-darwin-amd64 
          asset_content_type: application/octet-stream
      - name: upload darwin arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-darwin-arm64/terasky-insights-darwin-arm64
          asset_name: terasky-insights-darwin-arm64 
          asset_content_type: application/octet-stream
      - name: upload windows amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-windows-amd64.exe/terasky-insights-windows-amd64.exe 
          asset_name: terasky-insights-windows-amd64 
          asset_content_type: application/octet-stream


      - name: upload linux amd64 artifact to s3 distribution
        run: aws s3 cp /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-linux-amd64/terasky-insights-linux-amd64 s3://terasky-insights/terasky-insights-linux-amd64 --acl public-read


      - name: upload linux arm64 artifact to s3 distribution
        run: aws s3 cp /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-linux-amd64/terasky-insights-linux-arm64 s3://terasky-insights/terasky-insights-linux-arm64 --acl public-read


      - name: upload darwin amd64 artifact to s3 distribution
        run: aws s3 cp /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-darwin-amd64/terasky-insights-darwin-amd64  s3://terasky-insights/terasky-insights-darwin-amd64 --acl public-read


      - name: upload darwin arm64 artifact to s3 distribution
        run: aws s3 cp /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-darwin-arm64 s3://terasky-insights/terasky-insights-darwin-arm64 --acl public-read


      - name: upload windows amd64 artifact to s3 distribution
        run: aws s3 cp /home/runner/work/terasky-insights/terasky-insights/binaries/terasky-insights-windows-amd64.exe/terasky-insights-windows-amd64.exe s3://terasky-insights/terasky-insights-windows-amd64.exe --acl public-read

